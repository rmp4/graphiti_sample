# Graphiti 專案開發規範

## 程式碼風格
- 使用 Black 進行程式碼格式化
- 遵循 PEP 8 標準
- 所有函數和類別需要型別提示
- 使用 Pydantic 模型進行資料驗證
- 行長度限制 88 字元

## 架構規範
- 保持異步架構模式 (使用 async/await)
- 使用依賴注入模式
- 遵循單一職責原則
- 實現適當的錯誤處理和日誌記錄
- 模組化設計，功能分離

## 測試規範
- 每個新功能需要對應測試
- 使用 pytest 測試框架
- 保持測試覆蓋率 > 80%
- 包含單元測試和整合測試
- 測試檔案放在 tests/ 目錄

## 文件規範
- 所有公開 API 需要 docstring
- 使用 Google 風格的 docstring
- 更新相關的 README 檔案
- 包含使用範例和程式碼註解
- 函數和類別需要清楚的說明

## 依賴管理
- 優先使用專案現有依賴
- 新增依賴需要說明理由並更新 pyproject.toml
- 支援多個 LLM 提供商 (OpenAI, Anthropic, Google)
- 保持與 Neo4j 的相容性
- 使用 uv 進行依賴管理

## 檔案結構
- 核心功能放在 src/ 目錄
- 測試檔案放在 tests/ 目錄
- 範例資料放在 sample_data/ 目錄
- 文件更新需要同步
- 遵循 Python 套件標準結構

## Git 規範
- 提交訊息使用中文，格式清楚
- 功能分支開發，完成後合併
- 每次提交前運行測試
- 保持提交歷史乾淨

## 環境變數
- 敏感資訊使用環境變數
- 提供 .env.example 範例檔案
- 必填變數需要驗證
- 提供合理的預設值

## 錯誤處理
- 使用適當的異常類型
- 提供有意義的錯誤訊息
- 記錄錯誤詳細資訊
- 優雅地處理外部服務失敗

## Graphiti 特定規範
- 使用正確的 EpisodeType
- 提供 reference_time 參數
- 合理設計搜尋查詢
- 適當的節點和關係建模
- 保持與 Neo4j 最佳實踐一致

## 效能考量
- 異步操作避免阻塞
- 批量處理大量資料
- 合理使用快取機制
- 最佳化 Neo4j 查詢
- 監控記憶體使用
